-- Add migration script here
-- USERS
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email TEXT UNIQUE NOT NULL,
    hashed_password TEXT NOT NULL,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    role TEXT NOT NULL CHECK (role IN ('student', 'admin')),
    created_at TIMESTAMPTZ DEFAULT now()
);

-- DEPARTMENTS
CREATE TABLE departments (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code TEXT UNIQUE NOT NULL, -- e.g. CS, MATH
    name TEXT NOT NULL
);

-- COURSES
CREATE TABLE courses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    department_id INT NOT NULL REFERENCES departments(id),
    course_number TEXT NOT NULL, -- e.g. CS101
    title TEXT NOT NULL,
    description TEXT,
    credits INT NOT NULL CHECK (credits > 0),
    UNIQUE (department_id, course_number)
);

-- COURSE PREREQUISITES
CREATE TABLE course_prerequisites (
    course_id UUID REFERENCES courses(id) ON DELETE CASCADE,
    prerequisite_id UUID REFERENCES courses(id) ON DELETE CASCADE,
    PRIMARY KEY (course_id, prerequisite_id),
    CHECK (course_id <> prerequisite_id)
);

-- TERMS (e.g. Fall 2025)
CREATE TABLE terms (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL, -- e.g. Fall 2025
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    CHECK (start_date < end_date)
);

-- COURSE OFFERINGS (specific to a term)
CREATE TABLE course_offerings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    course_id UUID REFERENCES courses(id) ON DELETE CASCADE,
    term_id INT REFERENCES terms(id),
    instructor_id UUID REFERENCES users(id),
    capacity INT NOT NULL CHECK (capacity > 0),
    location TEXT,
    UNIQUE (course_id, term_id, instructor_id)
);

-- COURSE SCHEDULE (recurrence info)
CREATE TABLE course_meeting_times (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    offering_id UUID REFERENCES course_offerings(id) ON DELETE CASCADE,
    day_of_week TEXT CHECK (day_of_week IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')),
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    CHECK (start_time < end_time)
);

-- STUDENT PROFILE
CREATE TABLE student_profiles (
    user_id UUID PRIMARY KEY REFERENCES users(id),
    student_id TEXT UNIQUE NOT NULL, -- university-assigned
    enrollment_year INT NOT NULL,
    major TEXT
);

-- COURSE REGISTRATION
CREATE TABLE registrations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    student_id UUID REFERENCES users(id) ON DELETE CASCADE,
    offering_id UUID REFERENCES course_offerings(id) ON DELETE CASCADE,
    registered_at TIMESTAMPTZ DEFAULT now(),
    status TEXT NOT NULL CHECK (status IN ('registered', 'dropped', 'waitlisted')),
    grade TEXT, -- can be null until assigned
    UNIQUE (student_id, offering_id)
);

-- USERS
INSERT INTO users (email, hashed_password, first_name, last_name, role)
VALUES
    ('admin@example.edu', 'hashed_admin_pw', 'Alice', 'Admin', 'admin'),
    ('student@example.edu', 'hashed_student_pw', 'Bob', 'Student', 'student');

-- DEPARTMENTS
INSERT INTO departments (code, name)
VALUES
    ('CS', 'Computer Science'),
    ('MATH', 'Mathematics');
-- COURSES
INSERT INTO courses (department_id, course_number, title, description, credits)
VALUES
    ((SELECT id FROM departments WHERE code = 'CS'), 'CS101', 'Intro to Computer Science', 'Basics of programming and algorithms.', 4),
    ((SELECT id FROM departments WHERE code = 'CS'), 'CS102', 'Data Structures', 'Study of data structures and algorithms.', 4),
    ((SELECT id FROM departments WHERE code = 'MATH'), 'MATH101', 'Calculus I', 'Differential and integral calculus.', 3);

-- COURSE PREREQUISITES
INSERT INTO course_prerequisites (course_id, prerequisite_id)
VALUES (
    (SELECT id FROM courses WHERE course_number = 'CS102'),
    (SELECT id FROM courses WHERE course_number = 'CS101')
);

-- TERMS
INSERT INTO terms (name, start_date, end_date)
VALUES
    ('Fall 2025', '2025-08-25', '2025-12-15');

-- COURSE OFFERINGS
INSERT INTO course_offerings (course_id, term_id, instructor_id, capacity, location)
VALUES
    ((SELECT id FROM courses WHERE course_number = 'CS101'),
     (SELECT id FROM terms WHERE name = 'Fall 2025'),
     (SELECT id FROM users WHERE email = 'admin@example.edu'),
     50,
     'Room CS101'),

    ((SELECT id FROM courses WHERE course_number = 'MATH101'),
     (SELECT id FROM terms WHERE name = 'Fall 2025'),
     (SELECT id FROM users WHERE email = 'admin@example.edu'),
     40,
     'Room MATH201');

-- COURSE MEETING TIMES
INSERT INTO course_meeting_times (offering_id, day_of_week, start_time, end_time)
VALUES
    ((SELECT id FROM course_offerings WHERE location = 'Room CS101'), 'Monday', '09:00', '10:30'),
    ((SELECT id FROM course_offerings WHERE location = 'Room CS101'), 'Wednesday', '09:00', '10:30'),
    ((SELECT id FROM course_offerings WHERE location = 'Room MATH201'), 'Tuesday', '11:00', '12:30'),
    ((SELECT id FROM course_offerings WHERE location = 'Room MATH201'), 'Thursday', '11:00', '12:30');

-- STUDENT PROFILE
INSERT INTO student_profiles (user_id, student_id, enrollment_year, major)
VALUES (
    (SELECT id FROM users WHERE email = 'student@example.edu'),
    'S12345678',
    2024,
    'Computer Science'
);

-- COURSE REGISTRATION
INSERT INTO registrations (student_id, offering_id, status)
VALUES (
    (SELECT id FROM users WHERE email = 'student@example.edu'),
    (SELECT id FROM course_offerings WHERE location = 'Room CS101'),
    'registered'
);
